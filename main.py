import random
import configparser
import sqlalchemy as sq
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from sqlalchemy.orm import sessionmaker
from models import User, UserDictionary, MainDictionary

print('Start telegram bot...')

state_storage = StateMemoryStorage()
config = configparser.ConfigParser()
config.read('settings.ini')

token_bot = config['telegram']['token']
bot = TeleBot(token_bot, state_storage=state_storage)

engine = sq.create_engine(config['postgres']['DSN'])


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_users(engine):
    session = (sessionmaker(bind=engine))()
    users = session.query(User).all()
    users = [user.cid for user in users]
    session.close()
    return users

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_new_user(engine, user_id):
    session = (sessionmaker(bind=engine))()
    session.add(User(cid=user_id))
    session.commit()
    session.close()

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_words(engine, user_id):
    session = (sessionmaker(bind=engine))()
    words = session.query(UserDictionary.word, UserDictionary.translate) \
        .join(User, User.id == UserDictionary.id_user) \
        .filter(User.cid == user_id).all()
    common_words = session.query(MainDictionary.word, MainDictionary.translate).all()
    result = common_words + words
    session.close()
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_word(engine, cid, word, translate):
    session = (sessionmaker(bind=engine))()
    id_user = session.query(User.id).filter(User.cid == cid).first()[0]
    session.add(UserDictionary(word=word, translate=translate, id_user=id_user))
    session.commit()
    session.close()

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_user_word(engine, cid, word):
    session = (sessionmaker(bind=engine))()
    id_user = session.query(User.id).filter(User.cid == cid).first()[0]
    session.query(UserDictionary).filter(UserDictionary.id_user == id_user, UserDictionary.word == word).delete()
    session.commit()
    session.close()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–æ—Ç–µ
def show_hint(*lines):
    return '\n'.join(lines)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ Telegram-–±–æ—Ç–µ
class Command: 
    ADD_WORD = '–î–û–ë–ê–í–ò–¢–¨ –°–õ–û–í–û ‚ûï'
    DELETE_WORD = '–£–î–ê–õ–ò–¢–¨ –°–õ–û–í–û üîô'
    NEXT = '–î–ê–õ–¨–®–ï‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0
    

known_users = get_users(engine)
userStep = {}
buttons = []

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /cards –∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∏
@bot.message_handler(commands=['start', 'cards'])
def create_cards(message):
    cid = message.chat.id
    userStep[cid] = 0
    if cid not in known_users:
        known_users.append(cid)
        add_new_user(engine, cid)
        userStep[cid] = 0
        bot.send_message(cid, '''–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.

–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:

–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.
–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è?''')
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    words_random = random.sample(get_words(engine,cid), 4)
    word = words_random[0]
    print (f'Choosing word: {word}')
    target_word = word[0]
    translate = word[1]
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = [word for word, _ in words_random[1:]]
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–ê–õ–¨–®–ï‚è≠"
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–û–ë–ê–í–ò–¢–¨ –°–õ–û–í–û ‚ûï"
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ')
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–î–ê–õ–ò–¢–¨ –°–õ–û–í–û üîô"
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        word = data['target_word']
    delete_user_word(engine, cid, word)
    print(f'Delete word: {word}')
    bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ {word} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
    create_cards(message)

# –†–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: True, content_types=['text'])
def bot_reaction(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    cid = message.chat.id
    if userStep[cid] == 0:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            target_word = data['target_word']
            if  text == target_word:
                hint = show_target(data)
                hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
                hint = show_hint(*hint_text)
            else:
                for btn in buttons:
                    if btn.text == text:
                        btn.text = text +'‚ùå'
                        break
                hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                                f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
        markup.add(*buttons)
        bot.send_message(message.chat.id, hint, reply_markup=markup)
        if text == target_word:
            create_cards(message)

    elif userStep[cid] == 1:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['target_word'] = text
            bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ')
            bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)
            userStep[cid] = 2

    elif userStep[cid] == 2:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['translate_word'] = text
                add_user_word(engine,cid, data['target_word'], data['translate_word'])
                bot.send_message(cid, '–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
                bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
                hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§ –ñ–º–∏ –î–ê–õ–¨–®–ï‚è≠ –∏–ª–∏ –î–û–ë–ê–í–ò–¢–¨ –°–õ–û–í–û ‚ûï –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ"]
                hint = show_hint(*hint_text)
                userStep[cid] = 0
                markup.add(*buttons)
                bot.send_message(message.chat.id, hint, reply_markup=markup)
    
bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)
